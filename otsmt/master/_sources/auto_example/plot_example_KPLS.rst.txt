
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_example_KPLS.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_example_plot_example_KPLS.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_example_KPLS.py:


Use of KPLS
-----------

.. GENERATED FROM PYTHON SOURCE LINES 7-15

.. code-block:: default


    from smt.sampling_methods import LHS
    from smt.problems import Sphere
    from smt.surrogate_models import KPLS
    import numpy as np
    import otsmt









.. GENERATED FROM PYTHON SOURCE LINES 16-17

| Definition of Initial data

.. GENERATED FROM PYTHON SOURCE LINES 17-31

.. code-block:: default


       
    # Construction of the DOE
    fun = Sphere(ndim=2)
    sampling = LHS(xlimits=fun.xlimits, criterion="m")
    xt = sampling(40)
    yt = fun(xt)
    # Compute the gradient
    for i in range(2):
        yd = fun(xt, kx=i)
        yt = np.concatenate((yt, yd), axis=1)
       
    xv= sampling(10)
    







.. GENERATED FROM PYTHON SOURCE LINES 32-33

| Training of smt model for KPLS

.. GENERATED FROM PYTHON SOURCE LINES 33-38

.. code-block:: default


    sm_kpls = KPLS(theta0=[1e-2])
    sm_kpls.set_training_values(xt, yt[:,0])
    sm_kpls.train() 





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
                                       KPLS
    ___________________________________________________________________________
   
     Problem size
   
          # training points.        : 40
   
    ___________________________________________________________________________
   
     Training
   
       Training ...
       Training - done. Time (sec):  0.0316846




.. GENERATED FROM PYTHON SOURCE LINES 39-40

| Creation of OpenTurns PythonFunction for prediction

.. GENERATED FROM PYTHON SOURCE LINES 40-50

.. code-block:: default


    otkpls =  otsmt.smt2ot(sm_kpls)
    otkplsprediction = otkpls.getPredictionFunction()
    otkplsvariances = otkpls.getConditionalVarianceFunction()
    otkplsfirstderivatives = otkpls.getPredictionDerivativesFunction(0)
    otkplssecondderivatives = otkpls.getPredictionDerivativesFunction(1)

    print('Predicted values by KPLS:',otkplsprediction(xv))    
    print('Predicted variances values by KPLS:',otkplsvariances(xv))    
    print('Predicted mean first derivatives by KPLS:',otkplsfirstderivatives(xv))    
    print('Predicted mean second derivatives by KPLS:',otkplssecondderivatives(xv))      



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0002346
   
       Prediction time/pt. (sec) :  0.0000235
   
    Predicted values by KPLS:     [ y0       ]
    0 : [ 115.045  ]
    1 : [  57.4867 ]
    2 : [  12.1529 ]
    3 : [  59.0733 ]
    4 : [  60.6327 ]
    5 : [  15.6912 ]
    6 : [  19.1667 ]
    7 : [  44.5713 ]
    8 : [  84.6046 ]
    9 : [ 144.301  ]
    Predicted variances values by KPLS:     [ y0          ]
    0 : [ 7.39487e-06 ]
    1 : [ 7.66934e-06 ]
    2 : [ 3.97298e-06 ]
    3 : [ 9.5516e-06  ]
    4 : [ 7.58072e-06 ]
    5 : [ 5.60451e-06 ]
    6 : [ 5.43134e-06 ]
    7 : [ 5.34124e-06 ]
    8 : [ 1.05149e-05 ]
    9 : [ 0.000146173 ]
    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0001888
   
       Prediction time/pt. (sec) :  0.0000189
   
    Predicted mean first derivatives by KPLS:     [ y0        ]
    0 : [ -16.2554  ]
    1 : [  -8.58148 ]
    2 : [  -6.86419 ]
    3 : [  11.073   ]
    4 : [ -14.6179  ]
    5 : [  -3.99363 ]
    6 : [   2.31907 ]
    7 : [  12.8117  ]
    8 : [   7.58647 ]
    9 : [  17.3579  ]
    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0001752
   
       Prediction time/pt. (sec) :  0.0000175
   
    Predicted mean second derivatives by KPLS:     [ y0        ]
    0 : [ -13.9952  ]
    1 : [  12.5028  ]
    2 : [  -1.23244 ]
    3 : [ -10.6601  ]
    4 : [  -5.36933 ]
    5 : [   6.84393 ]
    6 : [   8.44432 ]
    7 : [   3.76088 ]
    8 : [  16.76    ]
    9 : [ -16.6007  ]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.039 seconds)


.. _sphx_glr_download_auto_example_plot_example_KPLS.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_example_KPLS.py <plot_example_KPLS.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_example_KPLS.ipynb <plot_example_KPLS.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
