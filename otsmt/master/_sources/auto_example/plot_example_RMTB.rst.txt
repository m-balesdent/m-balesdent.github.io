
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_example_RMTB.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_example_plot_example_RMTB.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_example_RMTB.py:


Use of Regularized minimal-energy tensor-product splines
--------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 7-15

.. code-block:: default


    from smt.sampling_methods import LHS
    from smt.problems import Sphere
    from smt.surrogate_models import RMTB
    import numpy as np
    import otsmt









.. GENERATED FROM PYTHON SOURCE LINES 16-17

| Definition of Initial data

.. GENERATED FROM PYTHON SOURCE LINES 17-31

.. code-block:: default


       
    # Construction of the DOE
    fun = Sphere(ndim=2)
    sampling = LHS(xlimits=fun.xlimits, criterion="m")
    xt = sampling(40)
    yt = fun(xt)
    # Compute the gradient
    for i in range(2):
        yd = fun(xt, kx=i)
        yt = np.concatenate((yt, yd), axis=1)
       
    xv= sampling(10)
    







.. GENERATED FROM PYTHON SOURCE LINES 32-33

| Training of smt model for Regularized minimal-energy tensor-product splines

.. GENERATED FROM PYTHON SOURCE LINES 33-44

.. code-block:: default


    sm_rmtb = RMTB(
    xlimits=fun.xlimits,
    order=4,
    num_ctrl_pts=20,
    energy_weight=1e-15,
    regularization_weight=0.0,
    )
    sm_rmtb.set_training_values(xt, yt[:,0])
    sm_rmtb.train()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
                                       RMTB
    ___________________________________________________________________________
   
     Problem size
   
          # training points.        : 40
   
    ___________________________________________________________________________
   
     Training
   
       Training ...
          Pre-computing matrices ...
             Computing dof2coeff ...
             Computing dof2coeff - done. Time (sec):  0.0000031
             Initializing Hessian ...
             Initializing Hessian - done. Time (sec):  0.0004725
             Computing energy terms ...
             Computing energy terms - done. Time (sec):  0.0064409
             Computing approximation terms ...
             Computing approximation terms - done. Time (sec):  0.0006995
          Pre-computing matrices - done. Time (sec):  0.0080099
          Solving for degrees of freedom ...
             Solving initial startup problem (n=400) ...
                Solving for output 0 ...
                   Iteration (num., iy, grad. norm, func.) :   0   0 2.557607446e+02 1.204632357e+05
                   Iteration (num., iy, grad. norm, func.) :   0   0 1.096625128e-13 8.422191896e-13
                Solving for output 0 - done. Time (sec):  0.0063584
             Solving initial startup problem (n=400) - done. Time (sec):  0.0064893
             Solving nonlinear problem (n=400) ...
                Solving for output 0 ...
                   Iteration (num., iy, grad. norm, func.) :   0   0 2.575975381e-15 8.422191896e-13
                Solving for output 0 - done. Time (sec):  0.0003872
             Solving nonlinear problem (n=400) - done. Time (sec):  0.0004995
          Solving for degrees of freedom - done. Time (sec):  0.0071785
       Training - done. Time (sec):  0.0157511




.. GENERATED FROM PYTHON SOURCE LINES 45-46

| Creation of OpenTurns PythonFunction for prediction

.. GENERATED FROM PYTHON SOURCE LINES 46-49

.. code-block:: default


    otrmtb =  otsmt.smt2ot(sm_rmtb)
    otrmtbprediction = otrmtb.getPredictionFunction()
    print('Predicted values by RMTB:',otrmtbprediction(xv))



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0003791
   
       Prediction time/pt. (sec) :  0.0000379
   
    Predicted values by RMTB:     [ y0         ]
    0 : [  68.6688   ]
    1 : [  79.0747   ]
    2 : [   0.619749 ]
    3 : [  19.1159   ]
    4 : [ 109.565    ]
    5 : [   8.3286   ]
    6 : [  15.2707   ]
    7 : [  17.9657   ]
    8 : [   3.43831  ]
    9 : [  24.7208   ]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.022 seconds)


.. _sphx_glr_download_auto_example_plot_example_RMTB.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_example_RMTB.py <plot_example_RMTB.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_example_RMTB.ipynb <plot_example_RMTB.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
