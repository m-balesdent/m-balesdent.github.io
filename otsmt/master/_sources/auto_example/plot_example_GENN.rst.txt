
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_example_GENN.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_example_plot_example_GENN.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_example_GENN.py:


Use of Gradient Enhanced Neural Network Model
---------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 7-16

.. code-block:: default


    from smt.sampling_methods import LHS
    from smt.problems import Sphere
    from smt.surrogate_models.genn import GENN, load_smt_data

    import numpy as np
    import otsmt









.. GENERATED FROM PYTHON SOURCE LINES 17-18

| Definition of Initial data

.. GENERATED FROM PYTHON SOURCE LINES 18-32

.. code-block:: default


       
    # Construction of the DOE
    fun = Sphere(ndim=2)
    sampling = LHS(xlimits=fun.xlimits, criterion="m")
    xt = sampling(40)
    yt = fun(xt)
    # Compute the gradient
    for i in range(2):
        yd = fun(xt, kx=i)
        yt = np.concatenate((yt, yd), axis=1)
       
    xv= sampling(10)
    







.. GENERATED FROM PYTHON SOURCE LINES 33-34

| Training of smt model for Neural Network

.. GENERATED FROM PYTHON SOURCE LINES 34-40

.. code-block:: default


    genn = GENN()
    load_smt_data(
          genn, xt, yt[:,0], yt[:,1:])  # convenience function to read in data that is in SMT format
    genn.train()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
                                       GENN
    ___________________________________________________________________________
   
     Problem size
   
          # training points.        : 40
   
    ___________________________________________________________________________
   
     Training
   
       Training ...
    epoch = 0, mini-batch = 0, avg cost =  1.779
    epoch = 1, mini-batch = 0, avg cost =  1.370
    epoch = 2, mini-batch = 0, avg cost =  1.349
    epoch = 3, mini-batch = 0, avg cost =  1.340
    epoch = 4, mini-batch = 0, avg cost =  1.335
    epoch = 5, mini-batch = 0, avg cost =  1.335
    epoch = 6, mini-batch = 0, avg cost =  1.335
    epoch = 7, mini-batch = 0, avg cost =  1.335
    epoch = 8, mini-batch = 0, avg cost =  1.335
    epoch = 9, mini-batch = 0, avg cost =  1.335
       Training - done. Time (sec):  4.7156301




.. GENERATED FROM PYTHON SOURCE LINES 41-42

| Creation of OpenTurns PythonFunction for prediction

.. GENERATED FROM PYTHON SOURCE LINES 42-50

.. code-block:: default


    otgenn =  otsmt.smt2ot(genn)
    otgennprediction = otgenn.getPredictionFunction()
    otgennfirstderivatives = otgenn.getPredictionDerivativesFunction(0)
    otgennsecondderivatives = otgenn.getPredictionDerivativesFunction(1)

    print('Predicted values by GENN:',otgennprediction(xv))
    print('Predicted mean first derivatives by GENN:',otgennfirstderivatives(xv))    
    print('Predicted mean second derivatives by GENN:',otgennsecondderivatives(xv))



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0000892
   
       Prediction time/pt. (sec) :  0.0000089
   
    Predicted values by GENN:     [ y0       ]
    0 : [  42.7161 ]
    1 : [ 145.038  ]
    2 : [  82.2966 ]
    3 : [  55.2115 ]
    4 : [  36.3937 ]
    5 : [  32.8535 ]
    6 : [ 111.024  ]
    7 : [ 106.793  ]
    8 : [  33.5687 ]
    9 : [  72.4333 ]
    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0002763
   
       Prediction time/pt. (sec) :  0.0000276
   
    Predicted mean first derivatives by GENN:     [ y0          ]
    0 : [  -6.23017   ]
    1 : [  10.757     ]
    2 : [ -16.3517    ]
    3 : [  -7.56132   ]
    4 : [  -0.427268  ]
    5 : [  -0.0504771 ]
    6 : [ -15.4021    ]
    7 : [  10.3207    ]
    8 : [  -0.682113  ]
    9 : [   6.46967   ]
    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0003722
   
       Prediction time/pt. (sec) :  0.0000372
   
    Predicted mean second derivatives by GENN:     [ y0          ]
    0 : [   1.37016   ]
    1 : [ -19.811     ]
    2 : [   1.1871    ]
    3 : [  -4.87361   ]
    4 : [  -1.14603   ]
    5 : [  -0.0449252 ]
    6 : [   2.39947   ]
    7 : [ -15.8024    ]
    8 : [   0.150805  ]
    9 : [  -8.84608   ]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.723 seconds)


.. _sphx_glr_download_auto_example_plot_example_GENN.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_example_GENN.py <plot_example_GENN.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_example_GENN.ipynb <plot_example_GENN.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
