
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_example_GENN.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_example_plot_example_GENN.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_example_GENN.py:


Use of Gradient Enhanced Neural Network Model
---------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 7-17

.. code-block:: default


    from smt.sampling_methods import LHS
    from smt.problems import Sphere
    from smt.surrogate_models.genn import GENN, load_smt_data

    import numpy as np
    import otsmt
    import openturns as ot









.. GENERATED FROM PYTHON SOURCE LINES 18-19

| Definition of Initial data

.. GENERATED FROM PYTHON SOURCE LINES 19-33

.. code-block:: default


       
    # Construction of the DOE
    fun = Sphere(ndim=2)
    sampling = LHS(xlimits=fun.xlimits, criterion="m")
    xt = sampling(40)
    yt = fun(xt)
    # Compute the gradient
    for i in range(2):
        yd = fun(xt, kx=i)
        yt = np.concatenate((yt, yd), axis=1)
       
    xv = ot.Sample([[0.1,1.],[1.,2.]])    
    







.. GENERATED FROM PYTHON SOURCE LINES 34-35

| Training of smt model for Neural Network

.. GENERATED FROM PYTHON SOURCE LINES 35-41

.. code-block:: default


    genn = GENN()
    load_smt_data(
          genn, xt, yt[:,0], yt[:,1:])  # convenience function to read in data that is in SMT format
    genn.train()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
                                       GENN
    ___________________________________________________________________________
   
     Problem size
   
          # training points.        : 40
   
    ___________________________________________________________________________
   
     Training
   
       Training ...
    epoch = 0, mini-batch = 0, avg cost =  1.308
    epoch = 1, mini-batch = 0, avg cost =  1.160
    epoch = 2, mini-batch = 0, avg cost =  0.999
    epoch = 3, mini-batch = 0, avg cost =  0.653
    epoch = 4, mini-batch = 0, avg cost =  0.625
    epoch = 5, mini-batch = 0, avg cost =  0.612
    epoch = 6, mini-batch = 0, avg cost =  0.612
    epoch = 7, mini-batch = 0, avg cost =  0.611
    epoch = 8, mini-batch = 0, avg cost =  0.610
    epoch = 9, mini-batch = 0, avg cost =  0.610
       Training - done. Time (sec):  4.9321151




.. GENERATED FROM PYTHON SOURCE LINES 42-43

| Creation of OpenTurns PythonFunction for prediction

.. GENERATED FROM PYTHON SOURCE LINES 43-51

.. code-block:: default


    otgenn =  otsmt.smt2ot(genn)
    otgennprediction = otgenn.getPredictionFunction()
    otgennfirstderivatives = otgenn.getPredictionDerivativesFunction(0)
    otgennsecondderivatives = otgenn.getPredictionDerivativesFunction(1)

    print('Predicted values by GENN:',otgennprediction(xv))
    print('Predicted mean first derivatives by GENN:',otgennfirstderivatives(xv))    
    print('Predicted mean second derivatives by GENN:',otgennsecondderivatives(xv))



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 2
   
       Predicting ...
       Predicting - done. Time (sec):  0.0000968
   
       Prediction time/pt. (sec) :  0.0000484
   
    Predicted values by GENN:     [ y0      ]
    0 : [ 21.3786 ]
    1 : [ 24.7186 ]
    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 2
   
       Predicting ...
       Predicting - done. Time (sec):  0.0003128
   
       Prediction time/pt. (sec) :  0.0001564
   
    Predicted mean first derivatives by GENN:     [ y0       ]
    0 : [ 0.473038 ]
    1 : [ 2.41013  ]
    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 2
   
       Predicting ...
       Predicting - done. Time (sec):  0.0002818
   
       Prediction time/pt. (sec) :  0.0001409
   
    Predicted mean second derivatives by GENN:     [ y0      ]
    0 : [ 1.24065 ]
    1 : [ 2.87642 ]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.939 seconds)


.. _sphx_glr_download_auto_example_plot_example_GENN.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_example_GENN.py <plot_example_GENN.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_example_GENN.ipynb <plot_example_GENN.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
