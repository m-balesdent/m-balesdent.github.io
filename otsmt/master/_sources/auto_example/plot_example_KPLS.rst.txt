
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_example/plot_example_KPLS.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_example_plot_example_KPLS.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_example_plot_example_KPLS.py:


Use of KPLS
-----------

.. GENERATED FROM PYTHON SOURCE LINES 7-15

.. code-block:: default


    from smt.sampling_methods import LHS
    from smt.problems import Sphere
    from smt.surrogate_models import KPLS
    import numpy as np
    import otsmt









.. GENERATED FROM PYTHON SOURCE LINES 16-17

| Definition of Initial data

.. GENERATED FROM PYTHON SOURCE LINES 17-31

.. code-block:: default


       
    # Construction of the DOE
    fun = Sphere(ndim=2)
    sampling = LHS(xlimits=fun.xlimits, criterion="m")
    xt = sampling(40)
    yt = fun(xt)
    # Compute the gradient
    for i in range(2):
        yd = fun(xt, kx=i)
        yt = np.concatenate((yt, yd), axis=1)
       
    xv= sampling(10)
    







.. GENERATED FROM PYTHON SOURCE LINES 32-33

| Training of smt model for KPLS

.. GENERATED FROM PYTHON SOURCE LINES 33-38

.. code-block:: default


    sm_kpls = KPLS(theta0=[1e-2])
    sm_kpls.set_training_values(xt, yt[:,0])
    sm_kpls.train() 





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
                                       KPLS
    ___________________________________________________________________________
   
     Problem size
   
          # training points.        : 40
   
    ___________________________________________________________________________
   
     Training
   
       Training ...
       Training - done. Time (sec):  0.0543995




.. GENERATED FROM PYTHON SOURCE LINES 39-40

| Creation of OpenTurns PythonFunction for prediction

.. GENERATED FROM PYTHON SOURCE LINES 40-50

.. code-block:: default


    otkpls =  otsmt.smt2ot(sm_kpls)
    otkplsprediction = otkpls.getPredictionFunction()
    otkplsvariances = otkpls.getConditionalVarianceFunction()
    otkplsfirstderivatives = otkpls.getPredictionDerivativesFunction(0)
    otkplssecondderivatives = otkpls.getPredictionDerivativesFunction(1)

    print('Predicted values by KPLS:',otkplsprediction(xv))    
    print('Predicted variances values by KPLS:',otkplsvariances(xv))    
    print('Predicted mean first derivatives by KPLS:',otkplsfirstderivatives(xv))    
    print('Predicted mean second derivatives by KPLS:',otkplssecondderivatives(xv))      



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0002909
   
       Prediction time/pt. (sec) :  0.0000291
   
    Predicted values by KPLS:     [ y0         ]
    0 : [  66.4159   ]
    1 : [  94.1938   ]
    2 : [  21.1964   ]
    3 : [  14.8652   ]
    4 : [  16.5335   ]
    5 : [ 109.961    ]
    6 : [  82.5647   ]
    7 : [  72.9141   ]
    8 : [ 105.637    ]
    9 : [   0.622088 ]
    Predicted variances values by KPLS:     [ y0          ]
    0 : [ 5.2478e-06  ]
    1 : [ 3.26109e-05 ]
    2 : [ 5.67245e-06 ]
    3 : [ 5.1996e-06  ]
    4 : [ 3.99814e-06 ]
    5 : [ 4.38038e-05 ]
    6 : [ 6.19533e-06 ]
    7 : [ 8.28835e-06 ]
    8 : [ 1.85998e-05 ]
    9 : [ 5.35531e-06 ]
    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0002809
   
       Prediction time/pt. (sec) :  0.0000281
   
    Predicted mean first derivatives by KPLS:     [ y0         ]
    0 : [  16.2956   ]
    1 : [ -10.2327   ]
    2 : [  -6.75432  ]
    3 : [   6.576    ]
    4 : [  -0.233886 ]
    5 : [  12.4713   ]
    6 : [  11.5678   ]
    7 : [ -14.0223   ]
    8 : [ -16.351    ]
    9 : [   0.390196 ]
    ___________________________________________________________________________
   
     Evaluation
   
          # eval points. : 10
   
       Predicting ...
       Predicting - done. Time (sec):  0.0002818
   
       Prediction time/pt. (sec) :  0.0000282
   
    Predicted mean second derivatives by KPLS:     [ y0        ]
    0 : [  -0.38739 ]
    1 : [  16.4911  ]
    2 : [   6.25956 ]
    3 : [  -4.02946 ]
    4 : [  -8.13022 ]
    5 : [ -16.857   ]
    6 : [  14.0132  ]
    7 : [   9.74893 ]
    8 : [ -12.4591  ]
    9 : [   1.53303 ]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.063 seconds)


.. _sphx_glr_download_auto_example_plot_example_KPLS.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_example_KPLS.py <plot_example_KPLS.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_example_KPLS.ipynb <plot_example_KPLS.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
